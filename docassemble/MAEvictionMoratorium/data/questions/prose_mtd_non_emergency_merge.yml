---
# TODO: Use more basic questions?
# TODO: Implement new multi-signature recipe: https://github.com/jhpyle/docassemble/blob/master/docassemble_demo/docassemble/demo/data/questions/examples/demo-multi-sign-2.yml
---
include:
  - docassemble.MAVirtualCourt:basic-questions.yml
  - sign_on_device.yml
  - parent_interview_redis_handler.yml
---
modules:
  - docassemble.base.util
  - docassemble.VirtualCourtToolbox.shortenURL
---
objects:
  - other_parties: PeopleList.using(ask_number=True)  # Can they be businesses? Does it matter?
  - codefendants: PeopleList.using(there_are_any=True, complete_attribute='complete')  # Can they be businesses?
  - signatories: DADict.using(auto_gather=False)
---
comment: |
  Predefine some variables we need
code: |
  allowed_courts = [
      "Housing Court",    
      "Boston Municipal Court",
      "District Court",
      ]
  preferred_court = "Housing Court"
  other_parties.there_are_any = True
  interview_presets = True
---
mandatory: True
id: interview order
code: |
  interview_presets
  
  # Skipping for speeding up tests
  download_only_intro_screen = True
  mtd_intro = True
  eviction_choice = "no"
  other_parties.target_number = '1'
  docket_numbers[0] = '111'
  preview_screen = True
  users[0].name.first = 'd'
  users[0].name.last = 'd'
  users[0].address.address = '12 Dudley Street'
  users[0].address.unit = ''
  users[0].address.city = 'Boston'
  users[0].address.state = 'Massachusetts'
  users[0].address.zip = '02127'
  other_parties[0].name.first = 'v'
  codefendants[0].name.first = 'c'
  #codefendants[1].name.first = 'f'
  #codefendants[2].name.first = 's'
  courts[0] = local_housing_court
  ready_to_serve = True
  service_method = 'first class mail, postage prepaid'
  service_date = '12/12/2020'
  will_proxy_sign = False
  exist_other_local_signers = False
  
  download_only_intro_screen
  mtd_intro
  if eviction_choice == "yes":
    kick_out
  users[0].name.first
  users[0].address.address
  users[0].mobile_number
  other_parties.target_number
  other_parties.gather()
  users.gathered = True
  users.there_is_another = False
  codefendants.gather()
  courts[0]
  docket_numbers[0]
  preview_screen
  # Do you want to send this to C to sign or did you get permission to sign it for them?
  form_to_sign  # Just have to make sure this is happily defined here

  # Get signers that will sign on this device
  local_signers
  
  # Also used for sending out for signatures (multiuser code)
  remote_signers = all_signers.difference(local_signers)
  # Cleaner way to do this?
  # Ask after user signs?
  for remote_signer in remote_signers:
    remote_signer.send_method

  ready_to_serve
  if not service_method == "not_know":
    service_date

  #basic_questions_signature_flow # user
  users[0].sign_on_device
  
  # handled in .after_signature
  #send_for_codefendant_signatures
  
  ## Can only include this code once per interview.
  ## Cannot be commented out.
  ## Sends the emails and does whatever other `background_action`s are queued up.
  #process_action()
  #
  #log( 'got here', 'console' )
  #for local in local_signers:
  #  local.signature
  #  local.notified = True  # Not sure we need this anymore
  #
  ## Makes sure users[0].status is the only page the user can see.
  ##force_ask('users[0].status')
  #users[0].status
---
# After the user signs, the links for the co-signers get sent
event: x.after_signature
generic object: Individual
code: |
  custom_interview_redis_data
  set_initial_redis_data

  if device() and device().is_pc:
    request_remote_signatures
    after_remote_signatures_requested
  else:
    if wants_to_finish_on_phone:
      request_remote_signatures
      after_remote_signatures_requested
    else:
      phone_end
---
id: ask wants to finish on phone
question: |
  Do you want to finish on your phone?
yesno: wants_to_finish_on_phone
---
event: phone_end
question: |
  Thank you
subquestion: |
  You can finish on your original device.
---
id: trigger requests for signatures
code: |
  for remote in remote_signers:
    remote.signature_url_was_sent
  users[0].was_notified_of_cosigner_messages
  request_remote_signatures = True
---
event: after_remote_signatures_requested
code: |
  # Request other signatures under here
  # Possibly using action arguments when that's worked out
  
  # Can only include this code once per interview.
  # Cannot be commented out.
  # Sends the emails and does whatever other `background_action`s are queued up.
  process_action()  # Needed? Probably - we want the requests sent now
  
  for local in local_signers:
    local.signature
    local.notified = True  # Not sure we need this anymore
  
  users[0].status
---
code: |
  download_titles = ['dismiss-non-essential-eviction.pdf']
---
code: |
  all_signers = users + codefendants
---
comment: |
  code: |
    signature_fields = []
    for index, user in enumerate(users):
      signature_fields.append('users[' + str(index) + '].signature')
    update_signature_fields = True
---
comment: |
  id: codefendant name
  question: |
    What is the name and e-mail address
    % if i == 0:
    of a
    % else:
    of the ${ ordinal(i) }
    % endif
    witness who can attest that you like ${ user.favorite_fruit }?
  fields:
    - Name: witnesses[i].name.text
---
id: basic questions intro screen
question: |
  Mass Access Project
subquestion: |
  This interview can help you complete and download court forms in 3 steps:
  
  Step 1. Answer questions to fill your motion.  
  Step 2. Review the completed motion.  
  Step 3. Download the motion and file it.
  
  This interview **does not** deliver the motion for you. You must do
  that on your own.
  
  % if chat_partners_available().help:
  Live help is currently available in this interview. Click the speech bubble
  (:comment-alt:) in the navigation bar to connect to a live advocate for help.
  % endif

fields:
  - To continue, read the [terms of use](https://massaccess.suffolklitlab.org/privacy/): acknowledged_information_use
    datatype: checkboxes
    none of the above: False    
    minlength: 1
    choices:
      - I accept the terms of use.
    validation messages:
      minlength: |
        You cannot continue unless you agree to the terms of use.        
continue button field: download_only_intro_screen
---
id: number of landlords
question:  |
  How many names are on the PLAINTIFF/LANDLORD/OWNER line of your summons and complaint?
subquestion: |
  Look at your summons and complaint.

  [FILE mtd_landlord_name.png]
fields: 
  - no label: other_parties.target_number
    datatype: integer
    min: 1
---
id: plaintiff names
question: |
  % if other_parties.target_number == 1:
    What is the plaintiff's name?
  % elif i==0:
    What is the first plaintiff's name?
  % else:
    What is the ${ordinal(i)} plaintiff's name?
  % endif 
fields:
  - no label: other_parties[i].name.first
---
id: eviction address
question: |
  What is the address you are being evicted from?
fields:
  - Street address: users[0].address.address
    address autocomplete: True
  - Unit: users[0].address.unit
    required: False
  - City: users[0].address.city
  - State: users[0].address.state
    code: states_list()
  - Zip: users[0].address.zip 
---
id: contact information
question: |
  Contact information
subquestion: |
  The court needs to be able to reach you about your case. Give them as many ways as you can.
fields:
  - Mobile number: users[0].mobile_number
    required: False
  - Other phone number: users[0].phone_number
    required: False
  - Email address: users[0].email    
    datatype: email
    required: False
  - What is the best way for the court to reach you: users[0].other_contact_method
    input type: area
    help: |
      If you do not have a phone number or email the court can use, provide
      specific contact instructions. For example, use a friend's phone number.
      But the friend must be someone you can trust to tell you the court is
      trying to reach you.
validation code: |
  if (not showifdef('users[0].phone_number') and \
      (not showifdef('users[0].mobile_number')) and \
      (not showifdef('users[0].email')) and \
      (not showifdef('users[0].other_contact_method'))):
    validation_error(word("You need to provide at least one contact method."))
help: |
  You _must_ provide contact information so the court can reach you.
---
id: eviction mtd covid intro screen
question: |
  Motion to Dismiss - Essential Eviction
subquestion: |  
  Massachusetts has an eviction moratorium. Most people cannot get evicted in Massachusetts before: 
  
  * August 18, 2020, or, 
  * Until 45 days after the Governor lifts the state of emergency,
  whichever comes first.  
  
  This is called the eviction moratorium. But you **can** get evicted if you risk the health and safety of someone else by:
  
  * Getting involved in criminal activity, or,
  * Violating your lease.
  
  This interview helps defend against an eviction your landlord should not have filed.
continue button field: mtd_intro
---
id: agree risked health and safety
question: |
  Are you risking someone's health and safety?
subquestion: |
  Are you:
  
  * Involved in criminal activity, or 
  * Breaking your lease,

  in a way that risks someone's health and safety. 
fields:
  - no label: eviction_choice
    datatype: radio
    choices:
      - No, I am not risking someone's health and safety.: no
      - Yes, I am risking someone's health and safety.: yes
---
id: kick out
event: kick_out
question: |
  This interview is not for you
subquestion: |
  You said your eviction was filed because you risked someone's health and safety.
  
  In some cases, you can still get the eviction dismissed even if you think you are risking someone's health or safety. 
  
  But talk to a lawyer because this makes it complicated.

  If you cannot file this motion or [talk to a lawyer](https://masslegalhelp.org/find-legal-aid), you can still fight your eviction case. Create an answer using [this free guided interview tool](https://www.gbls.org/MADE).
buttons:
  - Restart: restart
  - File an Answer with MADE: exit
    url: https://www.gbls.org/MADE
---
id: codefendants
question: |
  Is anyone else filing this motion with you?  
subquestion: |
  % if len(codefendants.elements) > 0:
  You already told us about ${comma_and_list(set(codefendants.elements))}
  % endif
yesno: codefendants.there_is_another
---
id: codefendant names
question: |
  Who else is filing with you?
fields:
  - First Name: codefendants[i].name.first
  - Middle Name: codefendants[i].name.middle
    required: False
  - Last Name: codefendants[i].name.last
    required: False
  - Suffix: codefendants[i].name.suffix
    required: False
---
id: how to send to codefendant
# TODO: Do we need to add contact info (number/email) for co-signer on court form?
question: |
  Do you want to send this to ${ codefendants[i] } by email or text?
fields:
  - no label: codefendants[i].send_method
    datatype: radio
    choices:
      - Email: email
      - Text: text
  - What email should we use to ask for their signature?: codefendants[i].signature_email
    js show if: |
      val("codefendants[i].send_method") == "email"
  - What number should we text to ask for their signature?: codefendants[i].signature_number
    js show if: |
      val("codefendants[i].send_method") == "text"
---
id: get codefendant info
code: |
  codefendants[i].name.first
  #codefendants[i].send_method
  #codefendants[i].signature
  #codefendants[i].signature_date
  codefendants[i].complete = True
---
id: placeholder
template: placeholder_message
content: |
  We won!
---
id: court question
sets:
  - courts[0].name
question: |
  What court is your case being heard in?
subquestion: |
  Look at your Summons and Complaint to find the name of the court
  your case was filed in.

  [FILE court-names.png]
fields:
  - Court name: courts[0]
    datatype: object
    choices: macourts.filter_courts(allowed_courts)
    default: local_housing_court
continue button field: ask_court_question    
---
id: ready to serve
question: |
  Are you ready to serve ${other_parties}?
subquestion: |
  Giving a copy of the motion to ${other_parties} is called "service."
  
  You need to: 
  
  * Give a copy of your motion to ${other_parties} 
  * File your motion with the ${courts[0].name}.
  
  During the pandemic, you can [email the motion](https://www.mass.gov/supreme-judicial-court-rules/supreme-judicial-court-order-concerning-email-service-in-cases-under)
  to ${other_parties} or their lawyer.
fields:
  - no label: ready_to_serve
    datatype: yesnoradio
  - How will you serve ${other_parties}?: service_method
    datatype: radio
    choices:
      - By email: electronic mail
      - By mail (with postage paid by me): first class mail, postage prepaid
      - other: other
      - I do not know: not_know
    show if:
      ready_to_serve
  - Other method: service_method
    show if:
      variable: service_method
      is: other
help:
  label: What are my options?
  content: |
    If your landlord has a lawyer, you need to get a copy to the
    lawyer. If they do not, you need to get it to the landlord.
    You can email the motion.
    
    Read more about your [options to deliver by email](https://www.mass.gov/supreme-judicial-court-rules/supreme-judicial-court-order-concerning-email-service-in-cases-under).    
---
id: service
question: |
  Service on ${other_parties}
fields:
  - When will you serve ${other_parties.familiar()}?: service_date
    datatype: date
---
id: docket number
question: |
  Docket number
subquestion: |
  If you know the docket number for this case, enter it below
fields:
  - I do not know the docket number: dont_know_docket_number
    datatype: yesno
  - Docket number: docket_numbers[0]
    hide if: dont_know_docket_number
help:
  label: |
    What is a docket number?
  content: |
    The docket number is the number the court uses to track your case.
    It may be on the notice you got from your landlord. 
validation code: |
  # docket_numbers.there_are_any = not dont_know_docket_number
  if dont_know_docket_number:
    docket_numbers[0] = ' '
  docket_numbers.there_is_another = False
---
id: download
event: download
question: |
  Your form is ready
subquestion: |
  Look over your form below.
  
  1. If it looks correct, download or email it to yourself.
  2. You still need to deliver it to:

  * The ${courts[0]}, and,
  * ${other_parties}. 

  3. Call the ${courts[0]}'s clerk:  
  <a href="tel:${courts[0].phone}">${courts[0].phone}</a> to find out how they want you to send them the motion.
  4. Your hearing will probably be over the phone. But the address
  of your court is ${courts[0].address.on_one_line()}.  
  5. Have you filed an Answer yet? If not, you may want to fill one out
  now via [MADE](https://gbls.org/MADE).
  
  ${ motion_to_dismiss_for_non_essential_eviction }
attachment code: motion_to_dismiss_for_non_essential_eviction  
progress: 100
---
id: preview
question: |
  Preview your motion
subquestion: |

  Tap the motion below to open it in a new window.
  
  Use the "Back" button to find the screen to fix mistakes.
  
  ${ form_to_sign }
continue button field: preview_screen
---
code: |
  form_to_sign = pdf_concatenate(preview_doc, filename="dismiss-non-essential-eviction-preview.pdf")
---
attachment:
  docx template file: motion_to_dismiss_for_non-essential_eviction.docx
  variable name: preview_doc
---
code: |
  final_form = pdf_concatenate(motion_to_dismiss_for_non_essential_eviction, filename="dismiss-non-essential-eviction.pdf")
  final_form.set_attributes(private=False, persistent=True)
---
attachment: 
  docx template file: motion_to_dismiss_for_non-essential_eviction.docx
  variable name: motion_to_dismiss_for_non_essential_eviction  
  filename: dismiss-non-essential-eviction
  name: Motion to Dismiss - Non-Essential Eviction
---
include:
  - multipleusers.yml
---
#######################
# Interface with redis handler
#######################
---
# Keep in as the default
code: |
  # When the saved redis data will expire
  remote_siganure_expiration_ms = 1* 6 * 60 * 60 * 1000  # 6hrs
---
# Keep in as the default
code: |
  # DEVELOPERS: Use the name of your own remote entrypoint file
  remote_signer_url_end = user_info().package + ':remote_signer_entrypoint.yml'
---
code: |
  form_to_sign.set_attributes(persistent=True, private=False)
  # Whatever info you want to be able to use for the co-signers' interview
  custom_interview_redis_data = {
    'user_names': str(users),
    'preview': form_to_sign,
  }
---
id: sms template multiuser
template: codefendants[i].sms_template
content: |
  Dear ${ codefendants[i] },
  Your signature needed on a document for ${ users[0] }.  
  ${ codefendants[i].cosigner_url }
---
id: codefendant email
template: codefendants[i].email_template
subject: |
  Your signature needed on a document for ${ users[0] }
content: |
  Dear ${ codefendants[i] },

  You are requested to sign a sworn statement attesting that ${ users[0] } TODO: WHAT ARE THEY ATTESTING.

  [Tap here to see the document you are being asked to sign](${ motion_to_dismiss_for_non_essential_eviction.pdf.url_for() }).

  [Tap here to sign the thing](${ codefendants[i].cosigner_url })
---
id: send user email
code: |
  users[0].message_succeeded = send_email(to=users[0], template=initial_email_template)
  users[0].was_notified_of_cosigner_messages = True
---
######################
# Interfacing with code to let user choose which device to sign on
######################
---
id: number to text for signature
generic object: Individual
question: |
  Sign on a phone
subquestion: |
  What number do you want to send this to for a signature?
fields:
  - no label: x.device_number
    default: ${ showifdef( x.instanceName + '.mobile_number' )}
---
generic object: Individual
code: |
  # TODO: Should this be in sign_on_device.yml?
  # TODO: Send with action arguments (in templates)
  #if x.send_method == 'text':
  #  x.send_sms_signature_link
  #elif x.send_method == 'email':  # Not implemented for MVP
  #  x.send_email_signature_link
  x.message_result = send_sms(task='send link to other device', to=x.device_number, template=x.sms_device_template)
  x.send_signature_link = True  # Used by sign_on_device.yml
---
generic object: Individual
template: x.sms_device_template
content:
  You have chosen to sign on this device, ${ x }. Sign your document at the link below

  ${ device_choice_url }
---
generic object: Individual
code: |
  # `action` experiments for true device choice begin here
  long_device_choice_url = interview_url_action( 'signature_with_device_choice', device_id='tbd', signature_data_id=signature_data_id, party_id=x.id )
  device_choice_url = shortenMe( long_device_choice_url ).shortenedURL
---
code: |
  signature_data_id = get_random_chars()
---
generic object: Individual
code: |
  x.id = get_random_chars()
---
code: |
  import random
  import string
  def get_random_chars(num_chars=10):
    return ''.join(random.choice(string.ascii_lowercase) for i in range(10))
---
# Triggered by new device
event: signature_with_device_choice
code: |
  users[0].sign_on_device
---
#################
# Interview-specific UI
#################
id: signature
generic object: Individual
question: |
  Sign your name, ${ x }
signature: x.signature
under: |
  ${ x }
---
id: if all signed send email
# Is requested when people check on the status of the signatures
code: |
  for codef in codefendants:
    if not defined( codef.instanceName + '.signature' ):
      all_signatures_in = False
      break
  else:
    final_email_sent
    all_signatures_in = True
---
id: signature status
event: users[0].status
prevent going back: True
reconsider:
  - get_stored_signatures
  - all_signatures_in
  - motion_to_dismiss_for_non_essential_eviction
  - final_form
question: |
  % if all_signatures_in:
  Your Eviction Moratorium has been signed.
  % else:
  Your Eviction Moratorium has not been signed by everyone yet.
  % endif
subquestion: |
  % if not all_signatures_in:
    % for codef in codefendants:
      % if defined( codef.instanceName + '.signature' ):
  ${ codef } has signed.

      % else:
  ${ codef } has not signed yet.

      % endif
    % endfor
  % else:
    % if len( codefendants ) > 1:
    ${ comma_and_list( codefendants )} have signed.
    % else:
      ${ codefendants[0] } has signed.
    % endif
  % endif
  
  ${ action_button_html('javascript:daShowSpinner();daRefreshSubmit()', label='Check again <i class="fas fa-sync-alt"></i>', size='lg') }
attachment code: motion_to_dismiss_for_non_essential_eviction
