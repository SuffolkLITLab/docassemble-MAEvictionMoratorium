comment: |
  Some pre-made functionality for mutli-user signatures.

  ## Definitions:
  `remote` in here refers to devices of signers other than the user or those using the user's device.
  
  ## Limitations:
  - Remote users never see the doc update (not MVP)
  
  As usual, these can all be customized. It just hopes these help save brain cells.
---
include:
  - sign_on_device.yml
---
metadata:
  title: Motion to Dismiss a Non-Essential Eviction
---
modules:
  - docassemble.VirtualCourtToolbox.misc
  - .signing_party
---
objects:
  - redis: DARedis
  - signer: Individual
  #- signer.devices: DAList.using(object_type=DAObject, auto_gather=False, gathered=True, there_is_another=False)  # For adding devices with actions
---
mandatory: True
code: |
  multi_user = True
---
# Currently getting here with the url in the console of the initial interview
# This can be customized as well if you want to do different stuff before running the rest
mandatory: True
code: |
  get_remote_signature
---
# Must be able to be triggered by action (from other device chosen)
event: get_remote_signature
code: |
  #devices[0] = devices.appendObject()
  signature_data_id = None
  party_id = None
  if action_argument() and action_argument('signature_data_id'):
    signature_data_id = action_argument('signature_data_id')
    party_id = action_argument('party_id')

  elif 'signature_data_id' in url_args:
    signature_data_id = url_args['signature_data_id']
    party_id = url_args['party_id']

  set_signer_attributes( signer, signature_data_id, party_id )
  if signer.valid:
    # Skip question if they've already signed or were already willing to sign.
    if signer.has_signed or signer.was_willing or signer.willing_to_sign:
      signer.willing_to_sign = True  # Hide this in the function below?
      store_willing_to_sign( signer, True )
      signer.sign_on_device
    else:
      signer.willing_to_sign = False  # Hide this in the function below?
      store_willing_to_sign( signer, False )
      signer.after_unwilling_to_sign

  # Untested
  else:
    unauthorized
---
# Interface directly with .sign_on_device code
id: x.after_signature
event: x.after_signature
generic object: Individual
code: |
  x.signature_date = today()
  x.has_signed = True
  x.signature.set_attributes(private=False, persistent=True)
  store_signature_data( x )

  x.after_signature_saved
---
# This follows the format of x.after_unwilling_to_sign_saved. Pros and cons of maintaining consisency? Is there any point if this won't be abstracted later?
id: x.after_unwilling_to_sign
event: x.after_unwilling_to_sign
generic object: Individual
code: |
  x.after_unwilling_to_sign_saved
---
code: |
  long_device_choice_url = interview_url_action( 'get_remote_signature', device_id='tbd', signature_data_id=signature_data_id, party_id=signer.id )
  device_choice_url = shortenMe( long_device_choice_url ).shortenedURL
  qr_url = interview_url_action_as_qr( 'get_remote_signature', device_id='tbd', signature_data_id=signature_data_id, party_id=signer.id )
---
###################
# Interfacing directly with remote signer interview order code
# Uses custom stored data from the user's interview
##################
---
id: willing to sign
generic object: Individual
question: |
  Are you willing to sign?
subquestion: |
  This is ${ redis.get_data( signature_data_id )['user_names'] }'s document. Are you willing to sign it?

  ${ redis.get_data( signature_data_id )['preview'] }
yesno: x.willing_to_sign
---
id: x.after_signature_saved
event: x.after_signature_saved
generic object: Individual
code: |
  # Maybe there's no final notification. They just see
  # all these notifications.
  trigger_signature_complete_user_notifications
  x.end
  #x.status
---
code: |
  background_action('send_signature_complete_user_notifications')
  trigger_signature_complete_user_notifications = True
---
event: send_signature_complete_user_notifications
code: |
  if task_not_yet_performed('send_signed_email') and redis.get_data( signature_data_id )['user_email']: 
    send_email(task='send_signed_email', to=(redis.get_data( signature_data_id )['user_email']), template=signed_email_template)
    
  if task_not_yet_performed('send_signed_sms') and redis.get_data( signature_data_id )['user_mobile']:
    send_sms(task='send_signed_sms', to=(redis.get_data( signature_data_id )['user_mobile']), template=signed_sms_template)
    
  background_response()
---
template: signed_email_template
subject: |
  ${ signer } has signed your Motion to Dismiss
content: |
  ${ redis.get_data( signature_data_id )['user_names'] },

  ${ signer } has signed your Motion to Dismiss a Non-Essential Eviction. [Tap here to go back to the form and see your document](${ redis.get_data( signature_data_id )['interview_url'] }).
---
template: signed_sms_template
content: |
  ${ signer.familiar() } has signed your Motion to Dismiss. Use the link to see your document. ${ redis.get_data( signature_data_id )['interview_url'] }
---
id: x.after_unwilling_to_sign_saved
event: x.after_unwilling_to_sign_saved
generic object: Individual
code: |
  trigger_unwilling_user_notifications
  x.unwilling_to_sign_end
---
code: |
  background_action('send_unwilling_user_notifications')
  trigger_unwilling_user_notifications = True
---
event: send_unwilling_user_notifications
code: |
  if task_not_yet_performed('send_unwilling_email') and redis.get_data( signature_data_id )['user_email']:
    send_email(task='send_unwilling_email', to=(redis.get_data( signature_data_id )['user_email']), template=unwilling_email_template)
    
  if task_not_yet_performed('send_unwilling_sms') and redis.get_data( signature_data_id )['user_mobile']:
    send_sms(task='send_unwilling_sms', to=(redis.get_data( signature_data_id )['user_mobile']), template=unwilling_sms_template)
    
  background_response()
---
template: unwilling_email_template
# at ${ signer.signature_email if defined('signer.signature_email') else signer.signature_number } (something complex to show both)
# TODO: When feature is ready, add that they can edit/resend to cosigner
subject: |
  ${ signer } will not sign you Motion to Dismiss
content: |
  ${ redis.get_data( signature_data_id )['user_names'] },
  
  We sent ${ signer } a link to your Motion to Dismiss a Non-Essential Eviction. They said they would not sign the motion. Call or talk to ${ signer } to find out if the contact information you wrote is correct. If it is wrong, fill out a new form with the correct information.

  If ${ signer } does not want to sign the motion, you can still print or download it without ${ signer }'s signature and file it with the court.

  [Tap here to go back to the form and see your document's status](${ redis.get_data( signature_data_id )['interview_url'] }).
---
template: unwilling_sms_template
content: |
  ${ signer.familiar() } will not sign your Motion to Dismiss. Use the link to see your document. ${ redis.get_data( signature_data_id )['interview_url'] }
---
###################
# Interfacing directly with script for user choosing other device to sign on
##################
---
generic object: Individual
code: |
  # TODO: Should this be in sign_on_device.yml?
  # TODO: Send with action arguments (in templates)
  # No email for MVP?
  if defined( x.attr_name( 'device_number' )):
    x.message_result = send_sms(task='send link to other device', to=x.device_number, template=x.sms_device_template)
  x.send_signature_link = True  # Used by sign_on_device.yml
---
id: signature
generic object: Individual
question: |
  ${ x }, sign below
signature: x.signature
---
###################
# Questions interacting with the above
##################
---
generic object: Individual
template: x.sms_device_template
content:
  ${ x.familiar() }, use this link to sign. ${ device_choice_url }
---
id: remote signer end
generic object: Individual
event: x.end
question: |
  Thank you
subquestion: |
  You have signed ${ redis.get_data( signature_data_id )['user_names'] }'s document. They will get your signature soon.
---
## Inactive. Should show signed doc with status, but not updating.
#id: signature status
#event: x.status
#generic object: Individual
#prevent going back: True
#question: |
#  Signature status for ${ x }
#subquestion: |
#  ${ redis.get_data( signature_data_id )['user_names'] }'s document.
#  
#  ${ redis.get_data( signature_data_id )[ 'signed_doc' ] }
---
id: unwilling to sign end
generic object: Individual
event: x.unwilling_to_sign_end
# TODO: Discuss if 'you can come back later' is more or less clear
question: |
  You did not sign the motion
subquestion: |
  If you change your mind later and want to sign it, go back to the message and click the link again.
  
  Thank you and goodbye.
buttons:
  - Start again: restart
  - Exit: exit
---
id: unauthorized
event: unauthorized
question: |
  Thank you and goodbye
buttons:
  - Exit: exit
---
id: 404
# Preferred?
event: unauthorized
code: |
  response('Page not found', response_code=404)
